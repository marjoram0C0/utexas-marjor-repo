"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Nicholas Trota, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: nkt425
"""


def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """
    # function to turn the output matrix into the encoded string
    def encode(matrix):
        rows = len(matrix)
        output_lst = []
        for i in range(rows):
            for c in matrix[i]:
                if c:
                    output_lst.append(c)
        return "".join(output_lst)

    # start by making a 2D list, with columns = string length
    # and rows = key
    e_matrix = [ [ None for _ in range(len(string)) ] for _ in range(key) ]
    # row = i, col = j. j is also used as an index on string
    i = j = -1

    # repeat zig zag until string finishes
    while True:
        # loop until hitting the bottom of the matrix
        while i < key - 1:
            i += 1
            j += 1
            if j >= len(string):
                return encode(e_matrix)
            e_matrix[i][j] = string[j]
        # loop until hitting the top of the matrix
        while i > 0:
            i -= 1
            j += 1
            if j >= len(string):
                return encode(e_matrix)
            e_matrix[i][j] = string[j]


def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    # function to combine output matrix and string
    def decode_1(string, matrix, key):
        rows = len(matrix)
        string_ind = 0
        for i in range(rows):
            for j, val in enumerate(matrix[i]):
                if val:
                    matrix[i][j] = string[string_ind]
                    string_ind += 1
        return decode_2(matrix, key)

    # function to read back decoded string from matrix
    def decode_2(matrix, key):
        output_lst = []
        # row = i, col = j. j is also used as an index on string
        i = j = -1
        # repeat zig zag until read back finishes
        while True:
            # loop until hitting the bottom of the matrix
            while i < key - 1:
                i += 1
                j += 1
                if j >= len(string):
                    return "".join(output_lst)
                output_lst.append(matrix[i][j])
            # loop until hitting the top of the matrix
            while i > 0:
                i -= 1
                j += 1
                if j >= len(string):
                    return "".join(output_lst)
                output_lst.append(matrix[i][j])

    # again create a 2D list with columns = string length
    # and rows = key
    d_matrix = [ [ None for _ in range(len(string)) ] for _ in range(key) ]
    # row = i, col = j. j is also used as an index on string
    i = j = -1

    # repeat zig zag until inputting spaces finishes
    while True:
        # loop until hitting the bottom of the matrix
        while i < key - 1:
            i += 1
            j += 1
            if j >= len(string):
                return decode_1(string, d_matrix, key)
            d_matrix[i][j] = True
        # loop until hitting the top of the matrix
        while i > 0:
            i -= 1
            j += 1
            if j >= len(string):
                return decode_1(string, d_matrix, key)
            d_matrix[i][j] = True


def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    output = []
    for c in string:
        if c.isalpha():
            output.append(c)
    return "".join(output).lower()


def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    code = ( (ord(p) - 97) + (ord(s) - 97) ) % 26
    return chr(code + 97)


def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    code = ord(s) - ord(p)
    if code < 0:
        code += 26
    return chr(code + 97)


def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    loop_num = len(phrase)
    output = []
    for i, c in enumerate(string):
        output.append(
            encode_character( phrase[i % loop_num], c )
        )
    return "".join(output)


def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    loop_num = len(phrase)
    output = []
    for i, c in enumerate(string):
        output.append(
            decode_character( phrase[i % loop_num], c )
        )
    return "".join(output)


def main():
    """Main function that reads stdin and runs each cipher"""
    # read the plain text from stdin (terminal/input)
    input_rail_plain = input()
    # read the key from stdin (terminal/input)
    rail_key_1 = input()
    # encrypt and print the encoded text using rail fence cipher
    output_rail_encode = rail_fence_encode(input_rail_plain, int(rail_key_1) )

    # read encoded text from stdin (terminal/input)
    input_rail_encode = input()
    # read the key from stdin (terminal/input)
    rail_key_2 = input()
    # decrypt and print the plain text using rail fence cipher
    output_rail_decode = rail_fence_decode(input_rail_encode, int(rail_key_2) )

    # read the plain text from stdin (terminal/input)
    input_vig_plain = input()
    # read the pass phrase from stdin (terminal/input)
    vig_phrase_1 = input()
    # encrypt and print the encoded text using Vigenere cipher
    output_vig_encode = vigenere_encode(input_vig_plain, vig_phrase_1)

    # read the encoded text from stdin (terminal/input)
    input_vig_encode = input()
    # read the pass phrase from stdin (terminal/input)
    vig_phrase_2 = input()
    # decrypt and print the plain text using Vigenere cipher
    output_vig_decode = vigenere_decode(input_vig_encode, vig_phrase_2)

    print("Rail Fence Cipher")
    print()
    print("Plain Text: " + input_rail_plain)
    print("Key: " + rail_key_1)
    print("Encoded Text: " +  output_rail_encode)
    print()
    print("Encoded Text: " + input_rail_encode)
    print("Enter Key: " + rail_key_2)
    print("Decoded Text: " + output_rail_decode)
    print()
    print("Vigenere Cipher")
    print()
    print("Plain Text: " + input_vig_plain)
    print("Pass Phrase: " + vig_phrase_1)
    print("Encoded Text: " + output_vig_encode)
    print()
    print("Encoded Text: " + input_vig_encode)
    print("Pass Phrase: " + vig_phrase_2)
    print("Decoded Text: " + output_vig_decode)
    print()


# Do NOT modify the following code.
if __name__ == "__main__":
    main()
