"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Nicholas Trota, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: nkt425
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    """
    You are also welcome to use a sentinel/dummy node!
    It is definitely recommended, which will we learn more
    about in class on Monday 3/24. If you choose to use
    a dummy node, comment out the self.head = None
    and comment in the below line. We use None to make sure
    if there is an error where you accidentally include the
    dummy node in your calculation, it will throw an error.
    """
    def __init__(self):
        # self.dummy = Node(None, None)
        self.head = None


    def insert_term(self, coeff, exp):
        """
        Insert the term with the coefficient coeff and exponent exp into the polynomial.
        If a term with that exponent already exists, add the coefficients together.
        You must keep the terms in descending order by exponent.
        """
        # if the coefficient is 0, end
        if coeff == 0:
            return

        new_term = Node(coeff, exp)

        # new term has highest degree/the polynomial is empty
        if self.head is None or exp > self.head.exp:
            new_term.next = self.head
            self.head = new_term
            return

        # check if the degree exists (in head)
        if exp == self.head.exp:
            self.head.coeff += coeff
            # check for 0
            if self.head.coeff == 0:
                self.head = self.head.next
            return

        cur = self.head
        # check if degree exists in index > 0
        while cur.next:
            # the term degree > cur.next's degree
            if exp > cur.next.exp:
                new_term.next = cur.next
                cur.next = new_term
                return
            # the term degree = cur.next's degree
            if exp == cur.next.exp:
                cur.next.coeff += coeff
                # check for 0
                if cur.next.coeff == 0:
                    cur.next = cur.next.next
                return
            cur = cur.next
        # reach the end of the list (cur.next is None)
        cur.next = new_term
        return


    def add(self, p):
        """
        Add a polynomial p to the polynomial and return the resulting polynomial as a 
        new linked list.
        """
        output = LinkedList()

        # Use pointers i and j to iterate through polynomial terms
        i = self.head
        j = p.head

        # i and j are equal length
        while i and j:
            # i and j are equal, add coeff
            if i.exp == j.exp:
                output.insert_term(i.coeff + j.coeff, i.exp)
                i = i.next
                j = j.next
            # i > j, add greater degree term and iterate i
            elif i.exp > j.exp:
                output.insert_term(i.coeff, i.exp)
                i = i.next
            # i < j, add greater degree term and iterate j
            else:
                output.insert_term(j.coeff, j.exp)
                j = j.next

        # i or j end (exit loop, finish adding terms)
        while i:
            output.insert_term(i.coeff, i.exp)
            i = i.next
        while j:
            output.insert_term(j.coeff, j.exp)
            j = j.next

        return output


    def mult(self, p):
        """
        Multiply a polynomial p with the polynomial and return the product as a new linked list.
        """
        output = LinkedList()

        # i and j pointers used to multiply every term in self by every term in p;
        # an O(NM) implementation
        i = self.head
        while i:
            j = p.head
            while j:
                output.insert_term(i.coeff * j.coeff, i.exp + j.exp)
                j = j.next
            i = i.next

        return output


    def __str__(self):
        """
        Return a string representation of the polynomial.
        """
        # represent the polynomial as a list of tuples
        poly = []

        cur = self.head
        while cur:
            # transform tuples into strings for joining
            poly += [str( (cur.coeff, cur.exp) )]
            cur = cur.next

        return " + ".join(poly)


def main():
    """
    Read data from stdin using input() to create polynomials p and q.
    Print the sum and the product of p and q.
    """
    # read data from stdin (terminal/file) using input() and create polynomial p
    p = LinkedList()
    p_len = int( input() )
    for _ in range(p_len):
        nums_str = input().split()
        nums_int = [int(x) for x in nums_str]
        p.insert_term(nums_int[0], nums_int[1])

    # throwaway line
    input()

    # read data from stdin (terminal/file) using input() and create polynomial q
    q = LinkedList()
    q_len = int( input() )
    for _ in range(q_len):
        nums_str = input().split()
        nums_int = [int(x) for x in nums_str]
        q.insert_term(nums_int[0], nums_int[1])

    # get sum of p and q as a new linked list and print sum
    print( p.add(q) )

    # get product of p and q as a new linked list and print product
    print( p.mult(q) )


if __name__ == "__main__":
    main()
