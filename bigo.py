"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Nicholas Trota, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: nkt425
"""


def length_of_longest_substring_n3(s):
    """
    Finds the length of the longest substring without repeating characters
    using a brute force approach (O(N^3)).

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """

    max_substring = 0
    current_max = 0
    valid_string = True

    # generate all substring index pairs
    # 1 to n, 2 to n, 3 to n, etc.
    for i in range(len(s)):
        for j in range(i,len(s)):

            # for every substring pair, generate a substring, then check for repeats
            # if there are repeats invalidate the substring
            char_count = [0] * 256
            for char in s[i: j+1]:
                char_count[ord(char)] += 1
                if char_count[ord(char)] == 1:
                    current_max += 1
                else:
                    valid_string = False

            # update the max substring length if the previous substring was valid
            # and longer than the current max
            if valid_string and (max_substring < current_max):
                max_substring = current_max

            # reset the current_max and substring validity
            current_max = 0
            valid_string = True

      # return max substring length
    return max_substring


def length_of_longest_substring_n2(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N^2)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """

    max_substring = 0
    current_max = 0
    valid_string = True

    # start the same, by generating possible start/end indeces
    for i in range(len(s)):
        # we generate an ascii index list again, but do not create substrings
        char_count = [0] * 256

        for j in range(i,len(s)):
            # for every character in the slice [i:len(s)], check if it is a duplicate;
            # if it is not, increment the current max and the overall max if necessary.
            # if it is, invalidate the rest of the slice
            char_count[ord(s[j])] += 1
            if char_count[ord(s[j])] == 1:
                current_max += 1
                if valid_string and max_substring < current_max:
                    max_substring = current_max
            else:
                valid_string = False

        # at the end of slice [i:len(s)], reset current_max and restore valid_string.
        # then start again for i = i + 1
        current_max = 0
        valid_string = True

    # return max substring length
    return max_substring


def length_of_longest_substring_n(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list. However, this approach stops early, breaking out of the inner
    loop when a repeating character is found. You may also choose to challenge
    yourself by implementing a sliding window approach.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """

    max_substring = 0
    current_max = 0

    # start looping from starting indices
    for i in range(len(s)):
        # create a data structure to check for repeats
        char_count = [0] * 256

        for j in range(i, len(s)):
            # for every character in the slice [i:len(s)], check if it is a repeat
            # if it is not, increment the current max and set the overall max if necessary
            # if it is, break the current loop and start again from the next starting index
            char_count[ord(s[j])] += 1
            if char_count[ord(s[j])] == 1:
                current_max += 1
                max_substring = max(max_substring, current_max)
            else:
                break

        # at the end of a given loop, reset the current max and data structure
        current_max = 0

    # return max substring length
    return max_substring
